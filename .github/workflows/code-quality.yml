name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 任务
jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码，克隆代码库
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive' # 检出子模块
    
    # 安装 Cppcheck
    - name: Install Cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
    
    # 运行 Cppcheck
    - name: Run Cppcheck
      run: |
        cppcheck --enable=all --std=c++17 --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          --suppress=missingInclude \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --suppress=internalAstError \
          --inconclusive \
          src/ 2> cppcheck_report.txt
      continue-on-error: true

    # 检查cppcheck报告是否有真正的错误或警告（排除信息级别消息）
    - name: check for Cppcheck issues
      id: cppcheck
      run: |
        # 检查是否有错误或警告级别的问题（排除information级别）
        if grep -E "(error|warning)" cppcheck_report.txt > /dev/null 2>&1; then
          echo "Cppcheck found errors or warnings. Failing the workflow."
          echo "exit_code=1" >> $GITHUB_ENV
          cat cppcheck_report.txt
        else
          echo "No Cppcheck errors or warnings found."
          echo "exit_code=0" >> $GITHUB_ENV
          if [ -s cppcheck_report.txt ]; then
            echo "Only information-level messages found:"
            cat cppcheck_report.txt
          fi
        fi

    # 上传 Cppcheck 报告（只在有错误或警告时）
    - name: Upload Cppcheck Report
      if: always() && env.exit_code == '1'
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck_report
        path: cppcheck_report.txt

    # 根据检查结果决定工作流最终状态
    - name: Fail workflow if issues were found
      run: exit ${{ env.exit_code }}
